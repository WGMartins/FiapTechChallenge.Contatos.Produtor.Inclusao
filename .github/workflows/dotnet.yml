# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: contatos-produtor-inclusao
  IMAGE_TAG: latest

jobs:
  build:

    permissions: write-all
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      run: dotnet restore ./TC.Contatos.Produtor.Inclusao/TC.Contatos.Produtor.Inclusao.Api/Api.csproj
      
    - name: Build
      run: dotnet build --no-restore ./TC.Contatos.Produtor.Inclusao/TC.Contatos.Produtor.Inclusao.Api/Api.csproj
      
    - name: Unit Test
      run: dotnet test --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage" ./TC.Contatos.Produtor.Inclusao/TC.Contatos.Produtor.Inclusao.UnitTest/UnitTest.csproj
      
    - name: Publish Test Report
      uses: dorny/test-reporter@v1.9.1
      if: always()
      with:
          name: Test Report
          path: "${{ github.workspace }}/**/*.trx"
          reporter: dotnet-trx

    - name: Upload Test Result Files
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ${{ github.workspace }}/**/TestResults/**/*
        retention-days: 5

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2.16.1
      if: always()
      with:
        trx_files: "${{ github.workspace }}/**/*.trx"

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - name: Build and Push image to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_NAME }}.azurecr.io
        username: ${{ secrets.ACR_NAME }}
        password: ${{ secrets.AZURE_CREDENTIALS }}

    - run: |
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.RESOURCE_GROUP }}
        cluster-name: ${{ secrets.CLUSTER_NAME }}

    - name: Deploy to AKS
      run: |
        kubectl create deployment ${{ env.IMAGE_NAME }} \
          --image=${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
          --dry-run=client -o yaml | kubectl apply -f -
        
        kubectl expose deployment ${{ env.IMAGE_NAME }} \
          --type=LoadBalancer --port=80 \
          --dry-run=client -o yaml | kubectl apply -f -
