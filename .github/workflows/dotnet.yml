# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY_NAME: fiaptechchallenge
  CLUSTER_NAME: FiapTechChallengeAKS
  CLUSTER_RESOURCE_GROUP: FiapTechChallenge
  NAMESPACE: default

jobs:
  build:

    permissions: write-all
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      run: dotnet restore ./TC.Contatos.Produtor.Inclusao/TC.Contatos.Produtor.Inclusao.Api/Api.csproj
      
    - name: Build
      run: dotnet build --no-restore ./TC.Contatos.Produtor.Inclusao/TC.Contatos.Produtor.Inclusao.Api/Api.csproj
      
    - name: Unit Test
      run: dotnet test --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage" ./TC.Contatos.Produtor.Inclusao/TC.Contatos.Produtor.Inclusao.UnitTest/UnitTest.csproj
      
    - name: Publish Test Report
      uses: dorny/test-reporter@v1.9.1
      if: always()
      with:
          name: Test Report
          path: "${{ github.workspace }}/**/*.trx"
          reporter: dotnet-trx

    - name: Upload Test Result Files
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ${{ github.workspace }}/**/TestResults/**/*
        retention-days: 5

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2.16.1
      if: always()
      with:
        trx_files: "${{ github.workspace }}/**/*.trx"

    # Connect to Azure Container registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    # Container build and push to a Azure Container registry (ACR)
    - run: |
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/myimage:${{ github.sha }} -f ./TC.Contatos.Produtor.Inclusao/Dockerfile
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/myimage:${{ github.sha }}
    
    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    
    # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} -o json | kubectl apply -f -
    
    # Create imagepullsecret for Azure Container registry (ACR)
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}
    
    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          manifests/deployment.yml
          manifests/service.yml
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/myimage:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}
